version: 3
output: prefixed

env:
  CLUSTER_NAME: greenstar
  DOMAIN: greenstar.test

dotenv:
  - .env

run: once

includes:
  toolchain:
    internal: true
    optional: false
    taskfile: build/Taskfile-toolchain.yaml

set:
  - x

silent: true

tasks:

  setup-domain-dns: { deps: [ toolchain:setup-domain-dns ] }

  generate:
    deps:
      - generate-graphql-acme
      - generate-graphql-frontend
      - generate-graphql-ratesjob
      - generate-graphql-server
      - generate-certificates

  generate-graphql-acme:
    deps: [ toolchain:node ]
    dir: acme
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-frontend:
    deps: [ toolchain:node ]
    dir: frontend
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-ratesjob:
    deps: [ toolchain:node ]
    dir: ratesjob
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-server:
    deps: [ toolchain:node ]
    dir: server
    cmds:
      - rm -rfv src/generated
      - npm run codegen

  generate-certificates:
    deps: [ toolchain:mkcert ]
    cmds:
      - mkcert -cert-file deploy/local/wildcard-tls.local.crt -key-file deploy/local/wildcard-tls.local.key "${DOMAIN}" "*.app.${DOMAIN}" "*.${DOMAIN}" "localhost" "127.0.0.1" "::1"
      - defer: rm -fv deploy/local/wildcard-tls.local.crt deploy/local/wildcard-tls.local.key
      - kubectl create secret tls wildcard-tls --cert=deploy/local/wildcard-tls.local.crt --key=deploy/local/wildcard-tls.local.key --dry-run=client --output=yaml > deploy/local/wildcard-tls-secret.local.yaml
    status:
      - test -f deploy/local/wildcard-tls-secret.local.yaml

  create-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind create cluster --name "${CLUSTER_NAME}" --config=deploy/local/kind-cluster-config.yaml --wait "1m"
      - curl -sSL "https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml" | kubectl apply -f -
    status:
      - kind get clusters -q | grep -E "^${CLUSTER_NAME}\$"
      - kubectl get crd | grep gateway.networking.k8s.io

  teardown-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind delete cluster --name "${CLUSTER_NAME}"
    status:
      - test "$(kind get clusters --quiet 2>/dev/null | grep -E "^${CLUSTER_NAME}\$"| wc -l | sed 's/^[ \t]*//')" = "0"

  ensure-observability-namespace:
    deps: [ create-cluster ]
    cmds:
      - kubectl get namespace -o=name | grep -qE "^namespace/observability$" || kubectl create namespace observability
    status:
      - kubectl get namespace -o=name | grep -qE "^namespace/observability$"

  setup-gateway:
    aliases:
      - setup-cluster
    deps: [ create-cluster, generate-certificates ]
    cmds:
      - |
        helm upgrade --install traefik traefik \
          --repo "https://traefik.github.io/charts" --version="v30.1.0" \
          --create-namespace --namespace="ingress" \
          -f deploy/local/traefik-values.yaml \
          --wait
      - kubectl apply --namespace=ingress -f ./deploy/local/wildcard-tls-secret.local.yaml
      - kubectl apply --namespace=ingress -f ./deploy/local/ingress-gateway.yaml
    sources:
      - ./deploy/local/wildcard-tls-secret.local.yaml
      - ./deploy/local/ingress-gateway.yaml
      - ./deploy/local/traefik-values.yaml
    status:
      - helm --namespace=ingress get metadata traefik

  setup-kube-state-metrics:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install kube-state-metrics kube-state-metrics \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/kube-state-metrics-values.yaml \
          --wait
    sources:
      - ./deploy/local/kube-state-metrics-values.yaml
    status:
      - helm --namespace=observability get metadata kube-state-metrics

  setup-metrics-server:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install metrics-server metrics-server \
          --repo https://kubernetes-sigs.github.io/metrics-server \
          --create-namespace \
          --namespace=observability \
          --set 'args={"--kubelet-insecure-tls"}' \
          --wait
    status:
      - helm --namespace=observability get metadata metrics-server

  setup-prometheus:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install prometheus prometheus \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/prometheus-values.yaml \
          --wait
      - kubectl apply --namespace=observability -f ./deploy/local/prometheus-routes.yaml
    sources:
      - ./deploy/local/prometheus-values.yaml
      - ./deploy/local/prometheus-routes.yaml
    status:
      - helm --namespace=observability get metadata prometheus

  setup-prometheus-node-exporter:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install prometheus-node-exporter prometheus-node-exporter \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/prometheus-node-exporter-values.yaml \
          --wait
    sources:
      - ./deploy/local/prometheus-node-exporter-values.yaml
    status:
      - helm --namespace=observability get metadata prometheus-node-exporter

  setup-jaeger:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - kubectl apply --namespace=observability -f deploy/local/jaeger.yaml
    sources:
      - deploy/local/jaeger.yaml
    status:
      - kubectl diff --namespace=observability -f deploy/local/jaeger.yaml

  setup-grafana:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        kustomize build deploy/local/grafana | kubectl apply -f - --namespace observability
        helm upgrade --install grafana grafana \
          --repo https://grafana.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/grafana-values.yaml \
          --wait
    sources:
      - ./deploy/local/grafana-values.yaml
      - ./deploy/local/grafana/kustomization.yaml
      - ./deploy/local/grafana/dashboards/*.json
    status:
      - helm --namespace=observability get metadata grafana

  setup-observability:
    deps:
      - setup-cluster
      - setup-kube-state-metrics
      - setup-metrics-server
      - setup-prometheus-node-exporter
      - setup-prometheus
      - setup-jaeger
      - setup-grafana

  setup-sensitive-environment:
    cmds:
      - touch ./hack/greenstar-values.yaml
      - yq -i '.frontend.extraEnv.VITE_GEOAPIFY_API_KEY.value = env(GEOAPIFY_API_KEY)' ./hack/greenstar-values.yaml
      - yq -i '.acme.files = []' ./hack/greenstar-values.yaml
      - |
        for filepath in ./deploy/local/acme/*.yaml; do
          NAME="$(basename "$filepath")" CONTENT="$(cat "$filepath")" yq -i \
            '.acme.files += [{"name": env(NAME), "content": env(CONTENT)}]' \
            ./hack/greenstar-values.yaml
        done

  deploy:
    deps: [ setup-cluster, setup-sensitive-environment ]
    cmds:
      - skaffold build -q > hack/skaffold-build.json
      - skaffold deploy --load-images --build-artifacts hack/skaffold-build.json

  undeploy:
    cmds:
      - skaffold delete

  dev:
    deps: [ setup-cluster, setup-sensitive-environment ]
    cmds:
      - skaffold dev --tail=false

  package-helm-chart:
    deps: [ toolchain:helm ]
    cmds:
      - yq -i ".acme.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".frontend.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".ratesjob.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - yq -i ".server.image.tag = \"${IMAGES_TAG}"\" deploy/chart/values.yaml
      - helm package ./deploy/chart --app-version "${VERSION}" --version "${VERSION}"
    requires:
      vars:
        - IMAGES_TAG
        - VERSION

  test:
    deps: [ toolchain:node ]
    dir: e2e
    cmds:
      - npm run test -- {{.CLI_ARGS}}

  docker-cleanup:
    cmds:
      - docker system prune --all --force --volumes

  download-cluster-state:
    cmds:
      - ./scripts/download-cluster-state.sh {{.CLI_ARGS}}
