name: Purge Caches

on:
  workflow_run:
    workflows:
      - Verify
    types:
      - completed
  schedule:
    - cron: 0 * * * *
  workflow_dispatch:

concurrency:
  cancel-in-progress: false
  group: purge-caches

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:

  purge:
    name: Purge
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: read
    steps:

      - name: Purge
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          CACHE_LIMIT_GB: "6"
        run: |
          LIMIT_BYTES=$((CACHE_LIMIT_GB * 1024 * 1024 * 1024))

          echo "üßπ Starting cache cleanup for $REPO"
          echo "üìè Cache size limit: ${CACHE_LIMIT_GB}GB (${LIMIT_BYTES} bytes)"

          cleanup_cycle=1
          
          while true; do
            echo ""
            echo "üîÑ Cleanup cycle #${cleanup_cycle}"
          
            # Get current cache usage
            echo "Fetching current cache usage..."
            cache_usage=$(gh api repos/$REPO/actions/cache/usage --jq '.active_caches_size_in_bytes')
            cache_usage_gb=$(echo "scale=2; $cache_usage / 1024 / 1024 / 1024" | bc -l)
            echo "Current cache usage: ${cache_usage_gb}GB (${cache_usage} bytes)"
          
            # Check if we're under the limit
            if [ "$cache_usage" -le "$LIMIT_BYTES" ]; then
              echo "‚úÖ Cache usage (${cache_usage_gb}GB) is under the limit (${CACHE_LIMIT_GB}GB)"
              echo "üéâ Cache cleanup completed!"
              break
            fi
          
            echo "‚ö†Ô∏è  Cache usage (${cache_usage_gb}GB) exceeds limit (${CACHE_LIMIT_GB}GB)"
          
            # Get list of caches sorted by last accessed time (oldest first)
            echo "üîç Finding oldest cache to delete..."
            oldest_cache=$(gh api repos/$REPO/actions/caches --method=GET -f sort=last_accessed_at -f direction=asc --jq '.actions_caches[0]')
          
            if [ "$oldest_cache" = "null" ] || [ -z "$oldest_cache" ]; then
              echo "‚ùå No caches found to delete"
              break
            fi
          
            # Extract cache details
            cache_id=$(echo "$oldest_cache" | jq -r '.id')
            cache_key=$(echo "$oldest_cache" | jq -r '.key')
            cache_size=$(echo "$oldest_cache" | jq -r '.size_in_bytes')
            cache_size_mb=$(echo "scale=2; $cache_size / 1024 / 1024" | bc -l)
            last_accessed=$(echo "$oldest_cache" | jq -r '.last_accessed_at')
          
            echo "üóëÔ∏è  Deleting oldest cache:"
            echo "   ID: $cache_id"
            echo "   Key: $cache_key"
            echo "   Size: ${cache_size_mb}MB"
            echo "   Last accessed: $last_accessed"
          
            # Delete the cache
            if gh api repos/$REPO/actions/caches/$cache_id -X DELETE; then
              echo "‚úÖ Successfully deleted cache: $cache_key"
            else
              echo "‚ùå Failed to delete cache: $cache_key"
              break
            fi
          
            ((cleanup_cycle++))
          
            # Add a small delay to avoid hitting rate limits
            if [[ $((cleanup_cycle % 2)) -eq 0 ]]; then
              sleep 1
            fi
          done
          
          echo ""
          echo "üèÅ Cache cleanup workflow completed after $((cleanup_cycle - 1)) cycles"
      - name: Final cache report
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üìà Final cache usage report:"
          REPO="${{ github.repository }}"
          
          # Get final cache usage
          cache_usage=$(gh api repos/$REPO/actions/cache/usage --jq '.active_caches_size_in_bytes')
          cache_usage_gb=$(echo "scale=2; $cache_usage / 1024 / 1024 / 1024" | bc -l)
          cache_count=$(gh api repos/$REPO/actions/caches --jq '.actions_caches | length')
          
          echo "üíæ Total cache usage: ${cache_usage_gb}GB"
          echo "üì¶ Number of caches: $cache_count"
          
          # List remaining caches
          echo ""
          echo "üìã Remaining caches:"
          gh api repos/$REPO/actions/caches --jq '.actions_caches[] | "  - \(.key) (\(.size_in_bytes / 1024 / 1024 | floor)MB, last used: \(.last_accessed_at))"'
