name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    types:
      - opened
      - synchronize

defaults:
  run:
    shell: bash -exuo pipefail {0}

jobs:

  test-e2e:
    name: Run End-to-End Tests
    runs-on: large
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Certificates
        env:
          MKCERT_ROOT_CA_PEM: ${{ secrets.MKCERT_ROOT_CA_PEM }}
          MKCERT_SERVER_CERT_PEM: ${{ secrets.MKCERT_SERVER_CERT_PEM }}
          MKCERT_SERVER_KEY_PEM: ${{ secrets.MKCERT_SERVER_KEY_PEM }}
        run: |
          echo -n "${MKCERT_ROOT_CA_PEM}" | base64 --decode > /usr/local/share/ca-certificates/greenstar-ca.crt
          echo -n "${MKCERT_SERVER_CERT_PEM}" | base64 --decode > deploy/local/wildcard-tls.local.crt
          echo -n "${MKCERT_SERVER_KEY_PEM}" | base64 --decode > deploy/local/wildcard-tls.local.key
          sudo update-ca-certificates

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup DNS
        run: task -v setup-domain-dns

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Setup Cluster
        id: setup-cluster
        run: task setup-gateway

      - name: Install Helm package
        env:
          VERSION: "0.0.0+${{ github.sha }}"
        run: |
          helm install greenstar oci://ghcr.io/${{ github.repository_owner }}/greenstar \
              --version "${VERSION}" \
              --create-namespace -n greenstar \
              -f deploy/local/chart-ci-values.yaml \
              --wait --wait-for-jobs

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: npm
          cache-dependency-path: e2e/package-lock.json

      - name: Setup NPM dependencies
        env:
          NPM_CONFIG_FUND: false
          NPM_CONFIG_AUDIT: false
        run: npm ci
        working-directory: e2e

      - name: Setup Playwright dependencies
        run: npm run deps
        working-directory: e2e

      - name: Run tests
        id: test
        run: npm run test
        working-directory: e2e

      - name: Export cluster state
        id: export-cluster-state
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        run: |
          kubectl cluster-info dump -o yaml --output-directory=./cluster-state --namespaces=ingress,greenstar
          kubectl get gateways.gateway.networking.k8s.io -o yaml -A > ./cluster-state/gateways.yaml
          kubectl get httproutes.gateway.networking.k8s.io -o yaml -A > ./cluster-state/httproutes.yaml
          kubectl get tlsroutes.gateway.networking.k8s.io -o yaml -A > ./cluster-state/tlsroutes.yaml

      - name: Upload cluster state artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.export-cluster-state.outcome == 'success'
        with:
          name: cluster-state
          path: ./cluster-state
          include-hidden-files: true

      - name: Teardown
        run: task teardown-cluster
        if: success() || steps.setup-cluster.outcome == 'success' || steps.setup-cluster.outcome == 'failure'

      - name: Setup Google Cloud SDK
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        uses: google-github-actions/auth@v2
        env:
          WORKLOAD_IDP: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-oidc
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDP }}

      - name: Upload artifact
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          process_gcloudignore: 'false'
          path: ./e2e/monocart-report/
          parent: false
          destination: arikkfir-static-website/github/greenstar/${{ github.run_id }}/${{ github.run_attempt }}/

      - name: Extract statistics
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        id: stats
        run: |
          echo "failed=$(jq '.summary.failed.value' < ./e2e/monocart-report//index.json)" >> "$GITHUB_OUTPUT"
          echo "flaky=$(jq '.summary.flaky.value' < ./e2e/monocart-report//index.json)" >> "$GITHUB_OUTPUT"
          echo "skipped=$(jq '.summary.skipped.value' < ./e2e/monocart-report//index.json)" >> "$GITHUB_OUTPUT"
          echo "passed=$(jq '.summary.passed.value' < ./e2e/monocart-report//index.json)" >> "$GITHUB_OUTPUT"
          echo "tests=$(jq '.summary.tests.value' < ./e2e/monocart-report//index.json)" >> "$GITHUB_OUTPUT"

      - name: Create contents
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        env:
          FAILED: "${{ steps.stats.outputs.failed }}"
          FLAKY: "${{ needs.stats.outputs.flaky }}"
          SKIPPED: "${{ needs.stats.outputs.skipped }}"
          PASSED: "${{ needs.stats.outputs.passed }}"
          TESTS: "${{ needs.stats.outputs.tests }}"
        run: |
          cat > comment.txt <<EOF
          ### ${{ steps.stats.outputs.failed == '0' && ':rocket:' || ':bangbang:' }} End-to-end tests ${{ steps.stats.outputs.failed == '0' && 'passed' || 'failed' }}!
          
          | Result                         | Count                                    |
          |--------------------------------|------------------------------------------|
          | :x: **Failed**                 | [${FAILED}][1]  |
          | :interrobang: **Flaky**        | [${FLAKY}][2]   |
          | :heavy_minus_sign: **Skipped** | [${SKIPPED}][3] |
          | :white_check_mark: **Passed**  | [${PASSED}][4]  |
          | **Total**                      | [${TESTS}][5]   |
          
          [1]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=failed
          [2]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=flaky
          [3]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=skipped
          [4]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=passed
          [5]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html
          EOF

      - name: Find Comment
        if: github.event_name == 'pull_request' && (success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure')
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-regex: '^### .* End-to-end tests'

      - name: Comment on PR
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request' && (success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body-file: comment.txt

      - name: Comment on commit
        uses: actions/github-script@v7
        if: github.event_name == 'push' && (success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            github.rest.repos.createCommitComment({ 
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}',
              body: fs.readFileSync('comment.txt', 'utf8'),
            })
