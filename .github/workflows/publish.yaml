name: Publish

on:
  workflow_run:
    workflows:
      - Verify
    types:
      - completed

defaults:
  run:
    shell: bash -exuo pipefail {0}

concurrency:
  cancel-in-progress: false
  group: publish

env:
  WORKLOAD_IDP: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-oidc

jobs:

  extract-source:
    name: Extract source PR/SHA
    runs-on: ubuntu-22.04
    permissions:
      actions: read
    outputs:
      pr: ${{ steps.extract-pr.outputs.pr }}
      sha: ${{ steps.extract-sha.outputs.sha }}
    steps:

      - name: Download metadata artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: metadata
          run-id: ${{github.event.workflow_run.id }}

      - name: Extract source PR
        id: extract-pr
        run: echo "pr=$(jq -r '.pr' < workflow-metadata.json)" >> "$GITHUB_OUTPUT"

      - name: Extract source SHA
        id: extract-sha
        run: echo "sha=$(jq -r '.sha' < workflow-metadata.json)" >> "$GITHUB_OUTPUT"

  publish-images:
    name: Publish Docker images
    runs-on: ubuntu-22.04
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && github.event.workflow_run.head_branch == 'main'
    strategy:
      matrix:
        image: [ acme, frontend, ratesjob, server ]
      fail-fast: true
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ matrix.image }}-image
          run-id: ${{github.event.workflow_run.id }}
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/${{ matrix.image }}.tar

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: docker push ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ github.event.workflow_run.head_sha }}

  upload-test-results:
    name: Upload
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      id-token: write
    outputs:
      failed: ${{ steps.extract-statistics.outputs.failed }}
      flaky: ${{ steps.extract-statistics.outputs.flaky }}
      skipped: ${{ steps.extract-statistics.outputs.skipped }}
      passed: ${{ steps.extract-statistics.outputs.passed }}
      tests: ${{ steps.extract-statistics.outputs.tests }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDP }}

      - name: Download artifact
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            if (!fs.existsSync('${{github.workspace}}/hack')) {
              fs.mkdirSync('${{github.workspace}}/hack', { recursive: true });
            }

            const owner = context.repo.owner
            const repo = context.repo.repo
            const archive_format = "zip"

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.event.workflow_run.id }},
            });
            const artifact_id = artifacts.data.artifacts.filter(artifact => artifact.name == "e2e-test-results")[0].id;
            
            const download = await github.rest.actions.downloadArtifact({ owner, repo, artifact_id, archive_format });
            fs.writeFileSync('${{github.workspace}}/hack/e2e-test-results.zip', Buffer.from(download.data));

      - run: |
          unzip e2e-test-results.zip
          rm -f e2e-test-results.zip
        working-directory: hack

      - name: Upload artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          process_gcloudignore: 'false'
          path: ./hack/
          parent: false
          destination: arikkfir-static-website/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/

      - name: Extract statistics
        id: extract-statistics
        run: |
          echo "failed=$(jq '.summary.failed.value' < hack/index.json)" >> "$GITHUB_OUTPUT"
          echo "flaky=$(jq '.summary.flaky.value' < hack/index.json)" >> "$GITHUB_OUTPUT"
          echo "skipped=$(jq '.summary.skipped.value' < hack/index.json)" >> "$GITHUB_OUTPUT"
          echo "passed=$(jq '.summary.passed.value' < hack/index.json)" >> "$GITHUB_OUTPUT"
          echo "tests=$(jq '.summary.tests.value' < hack/index.json)" >> "$GITHUB_OUTPUT"

  post-status-comment:
    name: Post status comment
    needs: [extract-source, upload-test-results]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Create contents
        env:
          FAILED: "${{ needs.upload-test-results.outputs.failed }}"
          FLAKY: "${{ needs.upload-test-results.outputs.flaky }}"
          SKIPPED: "${{ needs.upload-test-results.outputs.skipped }}"
          PASSED: "${{ needs.upload-test-results.outputs.passed }}"
          TESTS: "${{ needs.upload-test-results.outputs.tests }}"
        run: |
          cat > comment.txt <<EOF
          ### ${{ needs.upload-test-results.outputs.failed == '0' && ':rocket:' || ':bangbang:' }} End-to-end tests ${{ needs.upload-test-results.outputs.failed == '0' && 'passed' || 'failed' }}!
        
          | Result                         | Count                                    |
          |--------------------------------|------------------------------------------|
          | :x: **Failed**                 | [${FAILED}][1]  |
          | :interrobang: **Flaky**        | [${FLAKY}][2]   |
          | :heavy_minus_sign: **Skipped** | [${SKIPPED}][3] |
          | :white_check_mark: **Passed**  | [${PASSED}][4]  |
          | **Total**                      | [${TESTS}][5]   |
        
          [1]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=failed
          [2]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=flaky
          [3]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=skipped
          [4]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html#caseType=passed
          [5]: https://static.kfirs.com/github/greenstar/${{ github.event.workflow_run.id }}/${{ github.event.workflow_run.run_attempt }}/index.html
          EOF

      - name: Find Comment
        if: github.event.workflow_run.event == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ needs.extract-source.outputs.pr }}
          comment-author: 'github-actions[bot]'
          body-regex: '^### .* End-to-end tests'

      - name: Comment on PR
        uses: peter-evans/create-or-update-comment@v4
        if: github.event.workflow_run.event == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ needs.extract-source.outputs.pr }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body-file: comment.txt

      - name: Comment on commit
        uses: actions/github-script@v7
        if: github.event.workflow_run.event == 'push'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            github.rest.repos.createCommitComment({ 
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ needs.extract-source.outputs.sha }}',
              body: fs.readFileSync('comment.txt', 'utf8'),
            })
