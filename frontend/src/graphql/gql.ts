/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    query RootAccountsQuery($tenantID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            rootAccounts {\n                id\n                label: displayName\n                icon\n                childCount\n                balance(currency: $currency, until: $until)\n            }\n        }\n    }\n": typeof types.RootAccountsQueryDocument,
    "\n    query ChildAccountsQuery($tenantID: ID!, $parentID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $parentID) {\n                id\n                children {\n                    id\n                    label: displayName\n                    icon\n                    childCount\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n": typeof types.ChildAccountsQueryDocument,
    "\n    mutation MoveAccount($tenantID: ID!, $accountID: ID!, $targetParentAccountID: ID) {\n        moveAccount(tenantID: $tenantID, accountID: $accountID, targetParentAccountID: $targetParentAccountID) {\n            id\n        }\n    }\n": typeof types.MoveAccountDocument,
    "\n    query AccountBalanceOverTimeQuery($tenantID: ID!, $accountIDs: [ID!]!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accountsBalanceOverTime(accountIDs: $accountIDs, currency: $currency) {\n                account {\n                    id\n                    label: displayName\n                }\n                points {\n                    date\n                    balance\n                }\n            }\n        }\n    }\n": typeof types.AccountBalanceOverTimeQueryDocument,
    "\n    query AllAccountsQuery($tenantID: ID!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accounts {\n                id\n                displayName\n                icon\n                balance(currency: $currency)\n            }\n        }\n    }\n": typeof types.AllAccountsQueryDocument,
    "\n    query SubAccountsQuery($tenantID: ID!, $accountID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $accountID) {\n                id\n                children {\n                    id\n                    displayName\n                    icon\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n": typeof types.SubAccountsQueryDocument,
    "\n    query TransactionsQuery($tenantID: ID!, $involvingAccountID: ID, $offset: Int, $limit: Int, $sort: [TransactionsSortColumnsInput!], $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            transactions(involvingAccountID: $involvingAccountID, sort: $sort, offset: $offset, limit: $limit, until: $until) {\n                rows {\n                    id\n                    createdAt\n                    updatedAt\n                    currency {\n                        code\n                    }\n                    amount\n                    date\n                    description\n                    referenceID\n                    sourceAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                    targetAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n": typeof types.TransactionsQueryDocument,
    "\n    query CurrenciesQuery {\n        currencies {\n            code\n            createdAt\n            updatedAt\n            symbol\n            nativeSymbol\n            name\n            namePlural\n            decimalDigits\n            countries\n        }\n    }\n": typeof types.CurrenciesQueryDocument,
};
const documents: Documents = {
    "\n    query RootAccountsQuery($tenantID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            rootAccounts {\n                id\n                label: displayName\n                icon\n                childCount\n                balance(currency: $currency, until: $until)\n            }\n        }\n    }\n": types.RootAccountsQueryDocument,
    "\n    query ChildAccountsQuery($tenantID: ID!, $parentID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $parentID) {\n                id\n                children {\n                    id\n                    label: displayName\n                    icon\n                    childCount\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n": types.ChildAccountsQueryDocument,
    "\n    mutation MoveAccount($tenantID: ID!, $accountID: ID!, $targetParentAccountID: ID) {\n        moveAccount(tenantID: $tenantID, accountID: $accountID, targetParentAccountID: $targetParentAccountID) {\n            id\n        }\n    }\n": types.MoveAccountDocument,
    "\n    query AccountBalanceOverTimeQuery($tenantID: ID!, $accountIDs: [ID!]!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accountsBalanceOverTime(accountIDs: $accountIDs, currency: $currency) {\n                account {\n                    id\n                    label: displayName\n                }\n                points {\n                    date\n                    balance\n                }\n            }\n        }\n    }\n": types.AccountBalanceOverTimeQueryDocument,
    "\n    query AllAccountsQuery($tenantID: ID!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accounts {\n                id\n                displayName\n                icon\n                balance(currency: $currency)\n            }\n        }\n    }\n": types.AllAccountsQueryDocument,
    "\n    query SubAccountsQuery($tenantID: ID!, $accountID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $accountID) {\n                id\n                children {\n                    id\n                    displayName\n                    icon\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n": types.SubAccountsQueryDocument,
    "\n    query TransactionsQuery($tenantID: ID!, $involvingAccountID: ID, $offset: Int, $limit: Int, $sort: [TransactionsSortColumnsInput!], $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            transactions(involvingAccountID: $involvingAccountID, sort: $sort, offset: $offset, limit: $limit, until: $until) {\n                rows {\n                    id\n                    createdAt\n                    updatedAt\n                    currency {\n                        code\n                    }\n                    amount\n                    date\n                    description\n                    referenceID\n                    sourceAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                    targetAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n": types.TransactionsQueryDocument,
    "\n    query CurrenciesQuery {\n        currencies {\n            code\n            createdAt\n            updatedAt\n            symbol\n            nativeSymbol\n            name\n            namePlural\n            decimalDigits\n            countries\n        }\n    }\n": types.CurrenciesQueryDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query RootAccountsQuery($tenantID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            rootAccounts {\n                id\n                label: displayName\n                icon\n                childCount\n                balance(currency: $currency, until: $until)\n            }\n        }\n    }\n"): (typeof documents)["\n    query RootAccountsQuery($tenantID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            rootAccounts {\n                id\n                label: displayName\n                icon\n                childCount\n                balance(currency: $currency, until: $until)\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ChildAccountsQuery($tenantID: ID!, $parentID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $parentID) {\n                id\n                children {\n                    id\n                    label: displayName\n                    icon\n                    childCount\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query ChildAccountsQuery($tenantID: ID!, $parentID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $parentID) {\n                id\n                children {\n                    id\n                    label: displayName\n                    icon\n                    childCount\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation MoveAccount($tenantID: ID!, $accountID: ID!, $targetParentAccountID: ID) {\n        moveAccount(tenantID: $tenantID, accountID: $accountID, targetParentAccountID: $targetParentAccountID) {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation MoveAccount($tenantID: ID!, $accountID: ID!, $targetParentAccountID: ID) {\n        moveAccount(tenantID: $tenantID, accountID: $accountID, targetParentAccountID: $targetParentAccountID) {\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountBalanceOverTimeQuery($tenantID: ID!, $accountIDs: [ID!]!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accountsBalanceOverTime(accountIDs: $accountIDs, currency: $currency) {\n                account {\n                    id\n                    label: displayName\n                }\n                points {\n                    date\n                    balance\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query AccountBalanceOverTimeQuery($tenantID: ID!, $accountIDs: [ID!]!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accountsBalanceOverTime(accountIDs: $accountIDs, currency: $currency) {\n                account {\n                    id\n                    label: displayName\n                }\n                points {\n                    date\n                    balance\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AllAccountsQuery($tenantID: ID!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accounts {\n                id\n                displayName\n                icon\n                balance(currency: $currency)\n            }\n        }\n    }\n"): (typeof documents)["\n    query AllAccountsQuery($tenantID: ID!, $currency: String!) {\n        tenant(id: $tenantID) {\n            id\n            accounts {\n                id\n                displayName\n                icon\n                balance(currency: $currency)\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SubAccountsQuery($tenantID: ID!, $accountID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $accountID) {\n                id\n                children {\n                    id\n                    displayName\n                    icon\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query SubAccountsQuery($tenantID: ID!, $accountID: ID!, $currency: String!, $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            account(id: $accountID) {\n                id\n                children {\n                    id\n                    displayName\n                    icon\n                    balance(currency: $currency, until: $until)\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query TransactionsQuery($tenantID: ID!, $involvingAccountID: ID, $offset: Int, $limit: Int, $sort: [TransactionsSortColumnsInput!], $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            transactions(involvingAccountID: $involvingAccountID, sort: $sort, offset: $offset, limit: $limit, until: $until) {\n                rows {\n                    id\n                    createdAt\n                    updatedAt\n                    currency {\n                        code\n                    }\n                    amount\n                    date\n                    description\n                    referenceID\n                    sourceAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                    targetAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n"): (typeof documents)["\n    query TransactionsQuery($tenantID: ID!, $involvingAccountID: ID, $offset: Int, $limit: Int, $sort: [TransactionsSortColumnsInput!], $until: DateTime) {\n        tenant(id: $tenantID) {\n            id\n            transactions(involvingAccountID: $involvingAccountID, sort: $sort, offset: $offset, limit: $limit, until: $until) {\n                rows {\n                    id\n                    createdAt\n                    updatedAt\n                    currency {\n                        code\n                    }\n                    amount\n                    date\n                    description\n                    referenceID\n                    sourceAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                    targetAccount {\n                        id\n                        icon\n                        displayName\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CurrenciesQuery {\n        currencies {\n            code\n            createdAt\n            updatedAt\n            symbol\n            nativeSymbol\n            name\n            namePlural\n            decimalDigits\n            countries\n        }\n    }\n"): (typeof documents)["\n    query CurrenciesQuery {\n        currencies {\n            code\n            createdAt\n            updatedAt\n            symbol\n            nativeSymbol\n            name\n            namePlural\n            decimalDigits\n            countries\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;